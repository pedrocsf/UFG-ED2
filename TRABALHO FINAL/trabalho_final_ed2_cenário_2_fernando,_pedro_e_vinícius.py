# -*- coding: utf-8 -*-
"""Trabalho Final  - ED2 - Cenário 2 - Fernando, Pedro e Vinícius.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kMJAkwNccXBXtJiBoBUvd_sujNdcRnlT
"""

import heapq
from collections import deque, defaultdict
from statistics import mean


class TaskManager:
    def __init__(self):
        self.completed_tasks = []  # Pilha (histórico de tarefas concluídas)
        self.pending_tasks = deque()  # Fila (tarefas pendentes)
        self.task_mapping = defaultdict(list)  # Tabela hash (tarefas mapeadas aos responsáveis)
        self.priority_queue = []  # Fila de prioridades (tarefas ordenadas por prioridade)
        self.task_times = []  # Armazena o tempo das tarefas concluídas para cálculo de média

    def add_task(self, task, priority, responsible, estimated_time):
        """
        Adiciona uma nova tarefa ao sistema com prioridade e responsável.
        """
        self.pending_tasks.append((task, priority, estimated_time))
        heapq.heappush(self.priority_queue, (priority, task))
        self.task_mapping[responsible].append(task)
        print(f"Tarefa '{task}' adicionada com prioridade {priority} sob responsabilidade de '{responsible}'.")

    def complete_task(self):
        """
        Move uma tarefa da fila de pendentes para o histórico de tarefas concluídas.
        """
        if not self.pending_tasks:
            print("Nenhuma tarefa pendente para completar.")
            return

        task, priority, estimated_time = self.pending_tasks.popleft()
        self.completed_tasks.append(task)
        self.task_times.append(estimated_time)

        # Remove a tarefa da fila de prioridades
        self.priority_queue = [(p, t) for p, t in self.priority_queue if t != task]
        heapq.heapify(self.priority_queue)

        print(f"Tarefa '{task}' concluída.")

    def reorder_by_priority(self):
        """
        Reordena a fila de pendentes com base na prioridade.
        """
        self.pending_tasks = deque(
            sorted(self.pending_tasks, key=lambda x: x[1])
        )
        print("Tarefas pendentes reordenadas por prioridade.")

    def average_completion_time(self):
        """
        Calcula o tempo médio das tarefas concluídas.
        """
        if not self.task_times:
            print("Nenhuma tarefa concluída ainda.")
            return 0
        avg_time = mean(self.task_times)
        print(f"Tempo médio para completar tarefas: {avg_time:.2f}")
        return avg_time

    def display_pending_tasks(self):
        """
        Exibe as tarefas pendentes.
        """
        if not self.pending_tasks:
            print("Nenhuma tarefa pendente.")
            return
        print("Tarefas pendentes:")
        for task, priority, time in self.pending_tasks:
            print(f"- {task} (Prioridade: {priority}, Tempo estimado: {time})")

    def display_completed_tasks(self):
        """
        Exibe o histórico de tarefas concluídas.
        """
        if not self.completed_tasks:
            print("Nenhuma tarefa concluída.")
            return
        print("Tarefas concluídas:")
        for task in self.completed_tasks:
            print(f"- {task}")

    def display_task_mapping(self):
        """
        Exibe o mapeamento de tarefas para responsáveis.
        """
        if not self.task_mapping:
            print("Nenhuma tarefa mapeada.")
            return
        print("Mapeamento de tarefas para responsáveis:")
        for responsible, tasks in self.task_mapping.items():
            print(f"- {responsible}: {', '.join(tasks)}")


# Demonstração
if __name__ == "__main__":
    manager = TaskManager()
    manager.add_task("Implementar login", 2, "Alice", 3.5)
    manager.add_task("Criar frontend", 1, "Bob", 5.0)
    manager.add_task("Configurar banco de dados", 3, "Alice", 4.0)

    manager.display_pending_tasks()
    manager.complete_task()
    manager.average_completion_time()

    manager.reorder_by_priority()
    manager.display_pending_tasks()

    manager.display_completed_tasks()
    manager.display_task_mapping()